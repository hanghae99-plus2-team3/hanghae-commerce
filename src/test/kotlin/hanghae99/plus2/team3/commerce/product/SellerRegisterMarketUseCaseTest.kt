package hanghae99.plus2.team3.commerce.product

import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import java.util.*
import java.util.concurrent.atomic.AtomicLong

/**
 * RegisterSellerUseCaseTest
 *
 * @author jaypark
 * @version 1.0.0
 * @since 2023/09/18
 */

// 판매자는 본인의 상점 정보를 등록한다.
class SellerRegisterMarketUseCaseTest {
    private lateinit var sellerRegisterMarketUseCase: SellerRegisterMarketUseCase

    @BeforeEach
    fun setUp() {
        sellerRegisterMarketUseCase = SellerRegisterMarketUseCaseImpl(
            FakeMarketRepositoryImpl(
                MarketMemoryRepository()
            ),
            FakeSellerRepositoryImpl(
                SellerMemoryRepository()
            ),
        )
    }

    @Test
    fun `정상적으로 판매자가 상점를 등록하면 기대하는 응답을 반환한다`() {
        val command = SellerRegisterMarketUseCase.Command(
            name = "상점1",
            sellerId = 1L,
        )

        val savedMarket = sellerRegisterMarketUseCase.command(command)

        assertThat(savedMarket.id).isNotNull
        assertThat(savedMarket.name).isEqualTo(command.name)
        assertThat(savedMarket.sellerId).isEqualTo(command.sellerId)
    }
}


interface SellerRegisterMarketUseCase {
    fun command(command: Command): Market

    data class Command(
        val name: String,
        val sellerId: Long,
    ) {
        init {
            require(name.isNotBlank()) { "상점 이름은 필수입니다." }
            require(sellerId > 0) { "잘못된 판매자 ID 입니다." }
        }
    }
}

data class Market(
    val id: Long = 0,
    val name: String,
    val sellerId: Long,
) {
    init {
        require(name.isNotBlank()) { "상점 이름은 필수입니다." }
        require(sellerId > 0) { "잘못된 판매자 ID 입니다." }
    }
}

class SellerRegisterMarketUseCaseImpl(
    private val marketRepository: MarketRepository,
    private val sellerRepository: SellerRepository,

    ) : SellerRegisterMarketUseCase {
    override fun command(command: SellerRegisterMarketUseCase.Command): Market {

        val market = Market(
            name = command.name,
            sellerId = sellerRepository.findByIdOrNull(command.sellerId) ?: throw SellerNotFoundException(),
        )
        return marketRepository.save(market)
    }
}

interface MarketRepository {
    fun save(market: Market): Market
}

class FakeMarketRepositoryImpl(
    private val marketMemoryRepository: MarketMemoryRepository
) : MarketRepository {
    override fun save(market: Market): Market {
        return marketMemoryRepository.save(market)
    }
}

class MarketMemoryRepository {
    private val autoGeneratedId = AtomicLong(0)
    private val markets = Collections.synchronizedList(mutableListOf<MarketEntity>())

    fun save(market: Market): Market {
        val entity = MarketEntity(
            id = autoGeneratedId.incrementAndGet(),
            name = market.name,
            sellerId = market.sellerId,
        )
        markets.add(entity)
        return market.copy(id = entity.id)
    }
}

data class MarketEntity(
    val id: Long,
    val name: String,
    val sellerId: Long,
)


