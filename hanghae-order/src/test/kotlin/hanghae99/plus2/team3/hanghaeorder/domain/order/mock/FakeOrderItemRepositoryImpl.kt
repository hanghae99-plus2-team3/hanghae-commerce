package hanghae99.plus2.team3.hanghaeorder.domain.order.mock

import hanghae99.plus2.team3.hanghaeorder.domain.order.OrderItem
import hanghae99.plus2.team3.hanghaeorder.domain.order.infrastructure.OrderItemRepository
import hanghae99.plus2.team3.hanghaeorder.infrastructure.order.entity.OrderItemEntity
import java.util.*
import java.util.concurrent.atomic.AtomicLong

class FakeOrderItemRepositoryImpl(
    preSavedOrderItems: List<OrderItem>
) : OrderItemRepository {
    private val autoGeneratedId: AtomicLong = AtomicLong(0)
    private val orderItems: MutableList<OrderItemEntity> =
        Collections.synchronizedList(mutableListOf<OrderItemEntity>())

    init {
        preSavedOrderItems.forEach { save(it) }
    }

    override fun save(orderItem: OrderItem): OrderItem {
        if (orderItem.id == 0L) {
            val entity = OrderItemEntity(
                id = autoGeneratedId.incrementAndGet(),
                orderId = orderItem.orderId,
                productId = orderItem.productId,
                quantity = orderItem.quantity,
                productPrice = orderItem.productPrice,
                deliveryStatus = orderItem.deliveryStatus,
                orderEntity = null

            )
            orderItems.add(entity)
            return orderItem.copy(id = entity.id)
        } else {
            orderItems.removeIf {
                it.id == orderItem.id
            }
            orderItems.add(OrderItemEntity.of(orderItem))
            return orderItem
        }
    }

    override fun findByOrderId(orderId: Long): List<OrderItem> {
        return orderItems.filter { it.orderId == orderId }
            .map { it.toDomain() }
    }
}
