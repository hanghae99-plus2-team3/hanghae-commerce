package hanghae99.plus2.team3.hanghaeorder.domain.order.mock

import hanghae99.plus2.team3.hanghaeorder.common.exception.PaymentNotFoundException
import hanghae99.plus2.team3.hanghaeorder.domain.payment.Payment
import hanghae99.plus2.team3.hanghaeorder.domain.payment.infrastructure.PaymentRepository
import hanghae99.plus2.team3.hanghaeorder.infrastructure.payment.entity.PaymentEntity
import java.util.*
import java.util.concurrent.atomic.AtomicLong

class FakePaymentRepositoryImpl(
    preSavedPayments: List<Payment>
) : PaymentRepository {
    private val autoGeneratedId: AtomicLong = AtomicLong(0)
    val paymentRequests: MutableList<PaymentEntity> =
        Collections.synchronizedList(mutableListOf<PaymentEntity>())

    init {
        preSavedPayments.forEach { save(it) }
    }

    override fun save(payment: Payment): Payment {
        if (payment.id == 0L) {
            val entity = PaymentEntity(
                id = autoGeneratedId.incrementAndGet(),
                orderNum = payment.orderNum,
                paymentVendor = payment.paymentVendor,
                paymentAmount = payment.paymentAmount,
                success = payment.success,
                paymentResultCode = payment.paymentResultCode
            )
            paymentRequests.add(entity)
            return payment.copy(id = entity.id)
        } else {
            paymentRequests.removeIf {
                it.id == payment.id
            }
            paymentRequests.add(PaymentEntity.of(payment))
            return payment
        }
    }

    override fun getByOrderNum(orderNum: String): Payment {
        return (
            paymentRequests.find { it.orderNum == orderNum }
                ?: throw PaymentNotFoundException()
            )
            .toDomain()
    }
}
